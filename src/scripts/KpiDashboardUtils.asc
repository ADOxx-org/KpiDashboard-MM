PROCEDURE global DATASOURCE_HELPER nObjectId: integer {
    SETL host:("http://127.0.0.1:8080/dashboard/rest")
    CC "AdoScript" EDITFIELD title:"Enter the dashboard REST endpoint" caption:"Dashboard REST Endpoint:" text:(host)
    IF (ecode != 0) {
        EXIT
    }

    EXECUTE_DASHBOARDHELPER_JAR sArgument: ("chooseDatasourceType en \""+host+"\"") nObjectId: (nObjectId) sAttributeName: ("ds_type") result: sResult
    IF (sResult = "") {
        EXIT
    }

    CC "Core" GET_ATTR_VAL objid: (nObjectId) attrname:("ds_type")
    SETL sDatasourceValue:(val)
    EXECUTE_DASHBOARDHELPER_JAR sArgument: ("chooseDatasourceConfiguration en " + sDatasourceValue + " \""+host+"\"") nObjectId: (nObjectId) sAttributeName: ("ds_config") result: sResult
    IF (sResult = "") {
        EXIT
    }

    EXECUTE_DASHBOARDHELPER_JAR sArgument: ("chooseDatasourceUserInputs") nObjectId: (nObjectId) sAttributeName: ("userRequiredInputFieldList") result: sResult
    IF (sResult = "") {
        EXIT
    }
}

PROCEDURE global KPI_HELPER nObjectId: integer {
    EXECUTE_DASHBOARDHELPER_JAR sArgument: ("chooseKpiFields") nObjectId: (nObjectId) sAttributeName: ("Fields") result: sResult
}

PROCEDURE global EXECUTE_DASHBOARDHELPER_JAR sArgument: string nObjectId: integer sAttributeName: string result: reference
{
	CC "AdoScript"  GET_TEMP_FILENAME
	SETL sTempOutputFilePath:(filename)
	SETL sArg: (sArgument)
	SETL sTempFilename: (filename)
	SETL nPosFileName: (bsearch ( sTempFilename , "\\" , (LEN sTempFilename)-1 ))
    SETL sTempFolder: (copy ( sTempFilename , 0 , nPosFileName+1 ))
    SETL sDashboardName: ("dashboard-helper.jar")
	SETL dashboardPath:(sTempFolder+sDashboardName)
	
	CC "AdoScript" FILE_COPY from: ("db:\\"+sDashboardName) to: (dashboardPath)

    CC "Core" GET_ATTR_VAL objid: (nObjectId) attrname:(sAttributeName)
    SETL previousVal: (val)
    #SETL previousVal: (replall(previousVal, "\\", "\\\\"))
    SETL previousVal: (replall(previousVal, "\"", "\\\""))
    SETL previousVal: ("\"" + previousVal + "\"")
    #CC "AdoScript" INFOBOX ("cmd /c java -jar "+dashboardPath+ " " + sArg + " " + previousVal + ">" + sTempOutputFilePath)
	SYSTEM ("cmd /c java -jar "+dashboardPath+ " " + sArg + " " + previousVal + ">" + sTempOutputFilePath)
	
	CC "AdoScript" FREAD file: (sTempOutputFilePath)
	CC "Core" SET_ATTR_VAL objid: (nObjectId) attrname: (sAttributeName) val: (text)
	SETL sRES: (text)
	SETL result: (sRES)
}








PROCEDURE global EXPORT_KPI_MODEL_IN_JSON {
	CC "ImportExport" SHOW_EXPORT_DLG mode: "json" title: "Select the Models to export" filedescription: "json format" fileextension: "*.json"
	IF (endbutton != "ok") {
		EXIT
	}
	
	SETL sModelIdList:(modelids)
	SETL sExportPath:(filename)
	SETL sModelList:""
	FOR sModelId in:(sModelIdList)	{
        CC "Core" GET_MODEL_INFO modelid: (VAL sModelId)
        SETL sModelName: (modelname)
        CC "Core" GET_ATTR_VAL objid:(VAL sModelId) attrname:("Description")
        SETL sModelDesc: (val)
        
		PARSE_GOAL_CLASS sModelId:(sModelId) result:sResGoal
		PARSE_DATASOURCE_CLASS sModelId:(sModelId) result:sResDS
		PARSE_ALGORITHM_CLASS sModelId:(sModelId) result:sResALG
		PARSE_KPI_CLASS sModelId:(sModelId) result:sResKPI

		SETL sModelList:(sModelList + "{\"id\" : \"" +sModelId+ "\", \"name\" : \"" +sModelName+ "\", \"description\" : \"" +sModelDesc+ "\", \"kpiList\" : " + sResKPI + ", \"goalList\" : " + sResGoal + ", \"dataSourceList\" : " + sResDS + ", \"algorithmList\" : " + sResALG + " }, ")
	}
	SETL sModelList:(copy(sModelList, 0, LEN(sModelList)-2)) 
	SETL allModels:("{\"modelList\" : [" + sModelList + "]}")
	CC "AdoScript" FWRITE file: (sExportPath) text: (allModels) append: 0 binary: 0 base64: 0
    CC "AdoScript" INFOBOX "Export completed"
}

PROCEDURE global PARSE_DATASOURCE_CLASS sModelId: string result: reference {
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Datasource"
	SETL sDatasourceIdList: (objids)

	SETL sRet:("[")
	FOR sDatasourceId in:(sDatasourceIdList) {
		PARSE_SINGLE_DATASOURCE sDatasourceId:(sDatasourceId) result: sDataSourceJson
		SETL sRet:(sRet + sDataSourceJson + ", ")
	}
	SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
	SETL sRet:(sRet + "]")
	SETL result: (sRet)
}

PROCEDURE global PARSE_SINGLE_DATASOURCE sDatasourceId: string result: reference {
	SETL sRet:("{")
	SETL sRet:(sRet +"\"id\" : " + "\""+sDatasourceId+"\",")
	CC "Core" GET_OBJ_NAME objid:(VAL sDatasourceId)
	SETL sRet:(sRet +"\"name\" : " + "\""+objname+"\",")
	CC "Core" GET_ATTR_VAL objid:(VAL sDatasourceId) attrname:("ds_type") as-string
	SETL sRet:(sRet +"\"moduleName\" : " + "\""+val+"\",")
	CC "Core" GET_ATTR_VAL objid:(VAL sDatasourceId) attrname:("ds_config") as-string
    SETL sConfig: (val)
    IF (sConfig = "") {
        SETL sConfig: ("{}")
    }
	SETL sRet:(sRet +"\"moduleConfiguration\" : " + sConfig+",")
	CC "Core" GET_ATTR_VAL objid:(VAL sDatasourceId) attrname:("structuredOutput") as-string
	SETL sRet:(sRet +"\"structuredOutput\" : " +val+",")
	CC "Core" GET_ATTR_VAL objid:(VAL sDatasourceId) attrname:("userRequiredInputFieldList") as-string
    SETL sUserInput: (val)
    IF (sUserInput = "") {
        SETL sUserInput: ("[]")
    }
	SETL sRet:(sRet +"\"userRequiredInputFieldList\" : " +sUserInput)
	
	SETL sRet:(sRet +"}")
	SETL result: (sRet)
}

PROCEDURE global PARSE_ALGORITHM_CLASS sModelId: string result: reference {
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Algorithm"
	SETL sAlgorithmIdList: (objids)

	SETL sRet:("[")
	FOR sAlgorithmId in:(sAlgorithmIdList) {
		PARSE_SINGLE_ALGORITHM sAlgorithmId:(sAlgorithmId) result: sAlgorithmJson
		SETL sRet:(sRet + sAlgorithmJson + ", ")
	}
	SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
	SETL sRet:(sRet + "]")
	SETL result: (sRet)
}

PROCEDURE global PARSE_SINGLE_ALGORITHM sAlgorithmId: string result: reference {
	SETL sRet:("{")
	SETL sRet:(sRet +"\"id\" : " + "\""+sAlgorithmId+"\",")
	CC "Core" GET_ATTR_VAL objid:(VAL sAlgorithmId) attrname:("Name") as-string
	SETL sRet:(sRet +"\"name\" : " + "\""+val+"\",")
	CC "Core" GET_ATTR_VAL objid:(VAL sAlgorithmId) attrname:("Description") as-string
	SETL sRet:(sRet +"\"description\" : " + "\""+val+"\",")
	CC "Core" GET_ATTR_VAL objid:(VAL sAlgorithmId) attrname:("Code") as-string
    SETL val:(replall(val, "\n", " \\n"))
	SETL val:(replall(val, "\"", "\\\""))
	SETL sRet:(sRet +"\"code\" : " + "\""+val+"\"")
	
	SETL sRet:(sRet +"}")
	SETL result: (sRet)
}
	
PROCEDURE global PARSE_KPI_CLASS sModelId: string result: reference {
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"KPI"
	SETL sKPIIdList: (objids)

	SETL sRet:("[")
	FOR sKPIId in:(sKPIIdList) {
		PARSE_SINGLE_KPI sKPIId:(sKPIId) result: sKPIJson
		SETL sRet:(sRet + sKPIJson + ", ")
	}
	SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
	SETL sRet:(sRet + "]")
	SETL result: (sRet)	
}

PROCEDURE global PARSE_SINGLE_KPI sKPIId: string result: reference {
	SETL sRet:("{")
	SETL sRet:(sRet +"\"id\" : \""+sKPIId+"\", ")
	CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Name") as-string
    SETL sKPIName: (val)
	SETL sRet:(sRet +"\"name\" : \""+sKPIName+"\", ")
	CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Description") as-string
	SETL sRet:(sRet +"\"description\" : \""+val+"\", ")
	CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Fields") as-string
    SETL sFields: (val)
    IF (sFields = "") {
        SETL sFields: ("[]")
    }
	SETL sRet:(sRet +"\"fields\" : "+sFields+", ")
	
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+sKPIName+"\":\"KPI\"} -> \"kpi_has_algorithm\"") modelid: (VAL sModelId)
	SETL sConnectedAlgorithmId:(objids)
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+sKPIName+"\":\"KPI\"} -> \"has_datasource\"") modelid: (VAL sModelId)
	SETL sconnectedDataSourceId:(objids)
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+sKPIName+"\":\"KPI\"} -> \"depend_on_kpi\"") modelid: (VAL sModelId)
	SETL sRequiredKpi:(objids)
	
	SPLIT_STRING_IDS sList:(sRequiredKpi) result:sRequiredKpiArrayFinal
	
	IF (sConnectedAlgorithmId = "" AND sconnectedDataSourceId = "") {
		CC "AdoScript" ERRORBOX "No Algorithm or DataSource connected"
		EXIT
	}
	
	SETL sRet:(sRet + "\"connectedAlgorithmId\" : \""+sConnectedAlgorithmId+"\", ")
	SETL sRet:(sRet + "\"connectedDataSourceId\" : \""+sconnectedDataSourceId+"\", ")
	SETL sRet:(sRet + "\"requiredKpiIdList\" : ["+sRequiredKpiArrayFinal+"]")
	SETL sRet:(sRet +"}")
	
	SETL result: (sRet)
}

PROCEDURE global PARSE_GOAL_CLASS sModelId: string result: reference {
	CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Goal"
	SETL sGoalIdList: (objids)

	SETL sRet:("[")
	FOR sGoalId in:(sGoalIdList) {
		PARSE_SINGLE_GOAL sModelId:(sModelId) sGoalId:(sGoalId) result: sGoalJson
		
		SETL sRet:(sRet + sGoalJson + ", ")
	}
	SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
	SETL sRet:(sRet + "]")
	SETL result: (sRet)
}

PROCEDURE global PARSE_SINGLE_GOAL sModelId: string sGoalId: string result: reference {
	SETL sRet:("{")
	SETL sRet:(sRet +"\"id\" : " + "\""+sGoalId+"\", ")
	CC "Core" GET_ATTR_VAL objid:(VAL sGoalId) attrname:("Name") as-string
	SETL sRet:(sRet +"\"name\" : " + "\""+val+"\", ")
	CC "Core" GET_ATTR_VAL objid:(VAL sGoalId) attrname:("Description") as-string
	SETL sRet:(sRet +"\"description\" : " + "\""+val+"\", ")
	
	CC "Core" GET_ATTR_VAL objid:(VAL sGoalId) attrname:("Name") as-string
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+val+"\":\"Goal\"} -> \"goal_has_algorithm\"") modelid: (VAL sModelId)
	SETL sConnectedAlgorithmId:(objids)
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+val+"\":\"Goal\"} -> \"evaluated_with_kpi\"") modelid: (VAL sModelId)
	SETL sRequiredKpiList:(objids)
	CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+val+"\":\"Goal\"} -> \"depend_on_goal\"") modelid: (VAL sModelId)
	SETL sRequiredGoalList:(objids)
	
	SPLIT_STRING_IDS sList:(sRequiredGoalList) result:sRequiredGoalArrayFinal
	SPLIT_STRING_IDS sList:(sRequiredKpiList) result:sRequiredKpiArrayFinal
	
	IF (sConnectedAlgorithmId = "") {
		CC "AdoScript" ERRORBOX "No Algorithm connected"

		EXIT
	}
	SETL sRet:(sRet + "\"connectedAlgorithmId\" : \""+sConnectedAlgorithmId+"\", ")
	
	SETL sRet:(sRet + "\"requiredKpiIdList\" : ["+sRequiredKpiArrayFinal+"], ")
	SETL sRet:(sRet + "\"requiredGoalIdList\" : ["+sRequiredGoalArrayFinal+"]")
	SETL sRet:(replall(sRet, "&quot;", "\""))
	SETL sRet:(sRet +"}")
	
	SETL result: (sRet)
}	
	
PROCEDURE global SPLIT_STRING_IDS sList: string result: reference {
	SETL sRequireList:(sList)
	
	SETL sRequiredArray:""
	SETL sRes:""
	FOR sRequiredId in: (sRequireList) {
		SETL split:(sRequiredId)
		SETL sRequiredArray:(sRequiredArray + "\"" +split + "\",")
	}
	SETL sRequiredArray:(copy(sRequiredArray, 0, LEN(sRequiredArray)-1))
	SETL sRes:(sRes + sRequiredArray)
	
	SETL result: (sRes)
}