EXPORT_CAUSE_EFFECT_MODELS_IN_STATIC_JSON

PROCEDURE global EXPORT_CAUSE_EFFECT_MODELS_IN_STATIC_JSON {
    CC "ImportExport" SHOW_EXPORT_DLG mode: "json" title: "Select the Cause and Effect Models to export" filedescription: "json format" fileextension: "*.json"
    IF (endbutton != "ok") {
        EXIT
    }
	
    SETL sModelIdList:(modelids)
    SETL sExportPath:(filename)
    SETL sModelList:"  "
    FOR sModelId in:(sModelIdList)	{
        CC "Core" GET_MODEL_INFO modelid: (VAL sModelId)
        NORMALIZE_JSON_STRING sString:(modelname) result:sModelName
        CC "Core" GET_ATTR_VAL objid:(VAL sModelId) attrname:("Description")
        NORMALIZE_JSON_STRING sString:(val) result:sModelDesc

        PARSE_GOAL_CLASS sModelId:(sModelId) result:sGoalList
        PARSE_KPI_CLASS sModelId:(sModelId) result:sKPIList
        PROCESS_ALGORITHMS sModelId:(sModelId) result:sAlgorithmList
        PROCESS_DATASOURCES sModelId:(sModelId) result:sDataSourceList

        SETL sModelList:(sModelList + "{\"id\" : \"" +sModelId+ "\", \"name\" : \"" +sModelName+ "\", \"description\" : \"" +sModelDesc+ "\", \"kpiList\" : " + sKPIList + ", \"goalList\" : " + sGoalList + ", \"dataSourceList\" : " + sDataSourceList + ", \"algorithmList\" : " + sAlgorithmList + " }, ")
    }
    SETL sModelList:(copy(sModelList, 0, LEN(sModelList)-2)) 
    SETL allModels:("{\"modelList\" : [" + sModelList + "]}")
    
    CC "Application" GET_DATE_TIME date-format:"DD.MM.YYYY" time-format:"HH:MM:SS"
    SETL jsonExport:("{\"exportTime\":\""+date+" "+time+"\", \"dashboardConfig\":{}, \"dashboardStatus\":{\"kpiModel\": "+allModels+", \"widgetInstanceList\":[{\"id\":\"widget01-table-overview\", \"widgetId\":\"table-overview-widget\", \"widgetConfig\":{}, \"userInputList\":{}, \"position\":{\"x\":0,\"y\":0}, \"size\":{\"w\":11,\"h\":3}}, {\"id\":\"widget02-table-detailed\", \"widgetId\":\"table-overview-detailed-widget\", \"widgetConfig\":{}, \"userInputList\":{}, \"position\":{\"x\":0,\"y\":3}, \"size\":{\"w\":11,\"h\":11}}]}}")
    
    CC "AdoScript" FWRITE file: (sExportPath) text: (jsonExport) append: 0 binary: 0 base64: 0
    CC "AdoScript" INFOBOX "Export completed"
}

PROCEDURE global PARSE_GOAL_CLASS sModelId: string result: reference {
    SETL sRet:("[  ")
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Strategic goal"
    FOR sGoalId in:(objids) {
        PARSE_SINGLE_GOAL sModelId:(sModelId) sGoalId:(sGoalId) sGoalType:("Strategic goal") result: sGoalJson
        SETL sRet:(sRet + sGoalJson + ", ")
    }
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Operational goal"
    FOR sGoalId in:(objids) {
        PARSE_SINGLE_GOAL sModelId:(sModelId) sGoalId:(sGoalId) sGoalType:("Operational goal") result: sGoalJson
        SETL sRet:(sRet + sGoalJson + ", ")
    }
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Performance indicator"
    FOR sKPIId in:(objids) {
        PARSE_SINGLE_KPI_GOAL sModelId:(sModelId) sKPIId:(sKPIId) result: sKPIGoalJson
        SETL sRet:(sRet + sKPIGoalJson + ", ")
    }
    SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
    SETL sRet:(sRet + "]")
    SETL result: (sRet)
}

PROCEDURE global PARSE_SINGLE_GOAL sModelId: string sGoalId: string sGoalType: string result: reference {
    CC "Core" GET_ATTR_VAL objid:(VAL sGoalId) attrname:("Name") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sGoalName
    CC "Core" GET_ATTR_VAL objid:(VAL sGoalId) attrname:("Description") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sGoalDescription
    
    SETL sRet:("{")
    SETL sRet:(sRet +"\"id\" : " + "\""+sGoalId+"\", ")
    SETL sRet:(sRet +"\"name\" : " + "\""+sGoalName+"\", ")
    SETL sRet:(sRet +"\"description\" : " + "\""+sGoalDescription+"\", ")
    SETL sRet:(sRet + "\"connectedAlgorithmId\" : \""+sGoalId+"_alg\", ")
    SETL sRet:(sRet + "\"requiredKpiIdList\" : [], ")
    
    SETL sRequiredGoalList:("[  ")
    CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+sGoalName+"\":\""+sGoalType+"\"} <- \"quantifies\"") modelid: (VAL sModelId)
    FOR sObjectId in: (objids) {
        SETL sRequiredGoalList:(sRequiredGoalList + "\""+sObjectId+"_goal\", ")
    }
    CC "AQL" EVAL_AQL_EXPRESSION expr:("{\""+sGoalName+"\":\""+sGoalType+"\"} <- \"operationalizes\"") modelid: (VAL sModelId)

    FOR sObjectId in: (objids) {
        SETL sRequiredGoalList:(sRequiredGoalList + "\""+sObjectId+"\", ")
    }
    SETL sRequiredGoalList:(copy(sRequiredGoalList, 0, LEN(sRequiredGoalList)-2)+"]")

    SETL sRet:(sRet + "\"requiredGoalIdList\" : "+sRequiredGoalList+" ")
    SETL sRet:(sRet +"}")
    SETL result: (sRet)
}

PROCEDURE global PARSE_SINGLE_KPI_GOAL sModelId: string sKPIId: string result: reference {
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Name") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sKPIGoalName
    
    SETL sRet:("{")
    SETL sRet:(sRet +"\"id\" : " + "\""+sKPIId+"_goal\", ")
    SETL sRet:(sRet +"\"name\" : " + "\""+sKPIGoalName+"\", ")
    SETL sRet:(sRet +"\"description\" : " + "\"Goal that evaluate the succeded of the threshold levels defined for the KPI: "+sKPIGoalName+"\", ")
    SETL sRet:(sRet + "\"connectedAlgorithmId\" : \""+sKPIId+"_goal_alg\", ")
    SETL sRet:(sRet + "\"requiredKpiIdList\" : [\""+sKPIId+"\"], ")
    SETL sRet:(sRet + "\"requiredGoalIdList\" : [] ")
    SETL sRet:(sRet +"}")
    SETL result: (sRet)
}

PROCEDURE global PARSE_KPI_CLASS sModelId: string result: reference {
    SETL sRet:("[  ")
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Performance indicator"
    FOR sKPIId in:(objids) {
        PARSE_SINGLE_KPI sKPIId:(sKPIId) result: sKPIJson
        SETL sRet:(sRet + sKPIJson + ", ")
    }
	SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
	SETL sRet:(sRet + "]")
	SETL result: (sRet)	
}

PROCEDURE global PARSE_SINGLE_KPI sKPIId: string result: reference {
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Name") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sKPIName
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Description") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sKPIdescription
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Unit") as-string
    NORMALIZE_JSON_STRING sString:(val) result:sKPIUnit

    SETL sRet:("{")
    SETL sRet:(sRet +"\"id\" : \""+sKPIId+"\", ")
    SETL sRet:(sRet +"\"name\" : \""+sKPIName+"\", ")
    SETL sRet:(sRet +"\"description\" : \""+sKPIdescription+"\", ")
    SETL sRet:(sRet +"\"fields\" : [{\"name\":\"value\", \"measureUnit\":\""+sKPIUnit+"\"}, {\"name\":\"time\", \"measureUnit\":\"\"}, {\"name\":\"score\", \"measureUnit\":\"\"}, {\"name\":\"target\", \"measureUnit\":\"\"}, {\"name\":\"status\", \"measureUnit\":\"\"}], ")
    SETL sRet:(sRet + "\"connectedAlgorithmId\" : \"\", ")
    SETL sRet:(sRet + "\"connectedDataSourceId\" : \""+sKPIId+"_ds\", ")
    SETL sRet:(sRet + "\"requiredKpiIdList\" : []")
    SETL sRet:(sRet +"}")
    SETL result: (sRet)
}

PROCEDURE global PROCESS_ALGORITHMS sModelId: string result: reference {
    SETL sRet:("[  ")
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Strategic goal"
    FOR sGoalId in:(objids) {
        PROCESS_SINGLE_ALGORITHM sModelId:(sModelId) sGoalId:(sGoalId) sGoalType:("Strategic goal") result: sAlgJson
        SETL sRet:(sRet + sAlgJson + ", ")
    }
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Operational goal"
    FOR sGoalId in:(objids) {
        PROCESS_SINGLE_ALGORITHM sModelId:(sModelId) sGoalId:(sGoalId) sGoalType:("Operational goal") result: sAlgJson
        SETL sRet:(sRet + sAlgJson + ", ")
    }
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Performance indicator"
    FOR sKPIId in:(objids) {
        PROCESS_SINGLE_ALGORITHM sModelId:(sModelId) sGoalId:(sKPIId+"_goal") sGoalType:("Performance indicator") result: sAlgJson
        SETL sRet:(sRet + sAlgJson + ", ")
    }
    SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
    SETL sRet:(sRet + "]")
    SETL result: (sRet)
}

PROCEDURE global PROCESS_SINGLE_ALGORITHM sModelId: string sGoalId: string sGoalType: string result: reference {
    SETL sRet:("{")
    SETL sRet:(sRet +"\"id\" : \""+sGoalId+"_alg\", ")
    SETL sRet:(sRet +"\"name\" : \"Algorithm for goal "+sGoalId+"\", ")
    SETL sRet:(sRet +"\"description\" : \"Algorithm for goal "+sGoalId+"\", ")
    
    SETL sMoreInfo:("")
    SETL sStatus:("0")
    SETL sAttrName:("History (goal)")
    IF (sGoalType = "Performance indicator") {
        SETL sAttrName:("History")
    }
    CC "Core" GET_CLASS_ID classname: (sGoalType)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:(sAttrName)
    CC "Core" GET_REC_ATTR_ROW_COUNT objid:(VAL sGoalId) attrid:(attrid)
    IF (count > 0) {
        CC "Core" GET_REC_ATTR_ROW_ID objid:(VAL sGoalId) attrid:(attrid) index:(1)
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Status")
        IF (val = "Green") {
            SETL sStatus:("1")
        } ELSE {
            SETL sStatus:("-1")
        }
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Score")
        SETL sMoreInfo:(sMoreInfo+"score : '" + val + "', ")
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Updated")
        SETL sMoreInfo:(sMoreInfo+"time : '" + val + "'")
        IF (sGoalType = "Performance indicator") {
            CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Current value")
            SETL sMoreInfo:(sMoreInfo+", currentValue : '" + val + "'")
            CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Target value")
            SETL sMoreInfo:(sMoreInfo+", targetValue : '" + STR val + "'")
        }
    }
    
    SETL sRet:(sRet +"\"code\" : \"return { status : "+sStatus+", moreInfo : {"+sMoreInfo+"} };\"")
    SETL sRet:(sRet +"}")
    SETL result: (sRet)
}

PROCEDURE global PROCESS_DATASOURCES sModelId: string result: reference {
    SETL sRet:("[  ")
    CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(VAL sModelId) classname:"Performance indicator"
    FOR sKPIId in:(objids) {
        PROCESS_SINGLE_DATASOURCE sModelId:(sModelId) sKPIId:(sKPIId) result: sDSJson
        SETL sRet:(sRet + sDSJson + ", ")
    }
    SETL sRet:(copy(sRet, 0, LEN(sRet)-2))  
    SETL sRet:(sRet + "]")
    SETL result: (sRet)
}

PROCEDURE global PROCESS_SINGLE_DATASOURCE sModelId: string sKPIId: string result: reference {
    SETL sRet:("{")
    SETL sRet:(sRet +"\"id\" : \""+sKPIId+"_ds\", ")
    SETL sRet:(sRet +"\"name\" : \"Datasource for KPI "+sKPIId+"\", ")
    SETL sRet:(sRet +"\"moduleName\" : \"json-datasource\", ")
    
    SETL sContentJson:("{\\\"columns\\\" : [\\\"value\\\", \\\"time\\\", \\\"score\\\", \\\"target\\\", \\\"status\\\"], \\\"data\\\":[  ")
    CC "Core" GET_CLASS_ID classname: ("Performance indicator")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:("History")
    CC "Core" GET_REC_ATTR_ROW_COUNT objid:(VAL sKPIId) attrid:(attrid)
    FOR i from:(1) to:(count) by:(1) {
        CC "Core" GET_REC_ATTR_ROW_ID objid:(VAL sKPIId) attrid:(attrid) index:(i)
        
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Current value")
        SETL sContentJson:(sContentJson+"{ \\\"value\\\" : \\\"" + val + "\\\", ")
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Updated")
        SETL sContentJson:(sContentJson+"\\\"time\\\" : \\\"" + val + "\\\", ")
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Score")
        SETL sContentJson:(sContentJson+"\\\"score\\\" : \\\"" + val + "\\\", ")
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Target value")
        SETL sContentJson:(sContentJson+"\\\"target\\\" : \\\"" + STR val + "\\\", ")
        CC "Core" GET_ATTR_VAL objid:(rowid) attrname:("Status")
        SETL sContentJson:(sContentJson+"\\\"status\\\" : \\\"" + val + "\\\"}, ")
    }
    SETL sContentJson:(copy(sContentJson, 0, LEN(sContentJson)-2))
    SETL sContentJson:(sContentJson+" ], \\\"moreInfo\\\" : {")
    CC "Application" GET_DATE_TIME date-format:"DD.MM.YYYY" time-format:"HH:MM:SS"
    SETL sContentJson:(sContentJson+"\\\"retrievalTime\\\" : \\\""+date+" "+time+"\\\", ")
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Limit type") as-string
    SETL sContentJson:(sContentJson+"\\\"limitType\\\" : \\\""+val+"\\\", ")
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Threshold green/yellow") as-string
    SETL sContentJson:(sContentJson+"\\\"thresholdGreenYellow\\\" : \\\""+val+"\\\", ")
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Threshold yellow/red") as-string
    SETL sContentJson:(sContentJson+"\\\"thresholdYellowRed\\\" : \\\""+val+"\\\", ")
    CC "Core" GET_ATTR_VAL objid:(VAL sKPIId) attrname:("Threshold type") as-string
    SETL sContentJson:(sContentJson+"\\\"thresholdType\\\" : \\\""+val+"\\\"")
    SETL sContentJson:(sContentJson+" } }")
    
    SETL sRet:(sRet +"\"moduleConfiguration\" : {\"content\" : {\"value\" : \""+sContentJson+"\"}}, ")
    SETL sRet:(sRet +"\"structuredOutput\" : true, ")
    SETL sRet:(sRet +"\"userRequiredInputFieldList\" : []")
    SETL sRet:(sRet +"}")
    SETL result: (sRet)
}

PROCEDURE global NORMALIZE_JSON_STRING sString: string result: reference {
    SETL result: (replall(sString, "\"", "\\\""))
    SETL result: (replall(result, "\n", " "))
}